name: MNNSR for Linux
on:
  push:
    branches: [ master ]
    paths:
      - 'RealSR-NCNN-Android-CLI/MNN-SR/src/main/jni/**'
      - '.github/workflows/mnnsr-linux.yml'
  # pull_request:
  #   branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: ubuntu:20.04
            sysname: ubuntu20
            cuda: "11.0.3"
          - image: ubuntu:20.04
            sysname: ubuntu20
            cuda: "11.8.0"
          - image: ubuntu:20.04
            sysname: ubuntu20
            cuda: "12.2.0"
          - image: ubuntu:20.04
            sysname: ubuntu20
            cuda: "12.8.1"
          - image: ubuntu:22.04
            sysname: ubuntu22
            cuda: "11.8.0"
          - image: ubuntu:22.04
            sysname: ubuntu22
            cuda: "12.3.2"
          - image: ubuntu:22.04
            sysname: ubuntu22
            cuda: "12.8.1"
          # - image: ubuntu:24.04
          #   sysname: ubuntu24
          #   cuda: "11.8.0"
          #   # Failed to verify gcc version.
          # - image: ubuntu:24.04
          #   sysname: ubuntu24
          #   cuda: '12.3.2'
          #   # Failed in build mnncuda.
          - image: ubuntu:24.04
            sysname: ubuntu24
            cuda: "12.6.3"
          # - image: ubuntu:latest
          #   sysname: ubuntu
          #   cuda: '12.9.0'
          #   # Failed in setup cuda
          # - image: debian:bullseye
          #   sysname: debian
          #   cuda: "10.2.89"
          #   # Failed to verify gcc version.
          - image: debian:bullseye
            sysname: debian
            cuda: "12.2.0"

    container:
      image: ${{ matrix.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies (Debian/Ubuntu)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt-get update
          apt-get install -y --no-install-recommends ca-certificates sudo
          update-ca-certificates
          apt-get install -y --no-install-recommends build-essential unzip cmake git wget libopencv-dev ocl-icd-opencl-dev clinfo libvulkan-dev vulkan-tools
          
      - name: Clone 3rdparty
        run: |
          git clone https://github.com/webmproject/libwebp  --depth 1
          git clone https://github.com/alibaba/MNN --depth 1
          # wget https://github.com/alibaba/MNN/releases/download/3.1.0/mnn_3.1.0_linux_x64_cpu_opencl.zip; unzip mnn_3.1.0_linux_x64_cpu_opencl.zip ; mv mnn_3.1.0_linux_x64_cpu_opencl mnn_linux_x64;
          # cp MNN/include  mnn_linux_x64/
          wget -nv https://github.com/Tencent/ncnn/releases/download/20250503/ncnn-20250503-ubuntu-2404-shared.zip; unzip ncnn-20250503-ubuntu-2404-shared.zip ; mv ncnn-20250503-ubuntu-2404-shared  ncnn-ubuntu-shared
        working-directory: 3rdparty

      - name: Modify CMakeLists.txt for RPATH
        run: |
          echo "Modifying CMakeLists.txt to add RPATH settings..."
          sed -i.bak '/target_link_libraries(MNN PUBLIC -pthread dl)/a \
            set_target_properties(MNN PROPERTIES\
                BUILD_RPATH "$ORIGIN/lib"\
            )
          ' CMakeLists.txt
          echo "--- Verification: Content after modification ---"
          grep -C 5 "target_link_libraries(MNN PUBLIC -pthread dl)" CMakeLists.txt
        working-directory: 3rdparty/MNN

      - name: Verify the System
        run: |
          gcc --version
          sudo whoami
          echo cpu $(nproc)
          pwd

      - name: Set up CUDA ${{ matrix.cuda }}
        id: cuda
        uses: Jimver/cuda-toolkit@v0.2.25
        with:
          cuda: ${{ matrix.cuda }}
          use-github-cache: false
          use-local-cache: false
          log-file-suffix: '${{ matrix.sysname }}-cuda${{ matrix.cuda }}.txt'
        
      - name: build mnn
        id: mnn
        run: |
          mkdir build ;cd build; cmake ..  -DCMAKE_BUILD_TYPE=Release -DMNN_TENSORRT=OFF -DMNN_OPENGL=OFF  -DMNN_OPENCL=ON  -DMNN_VULKAN=ON  -DMNN_CUDA=ON  -DMNN_SEP_BUILD=OFF  && make -j$(nproc)
          mkdir ../libs ; cp -v $(find . -name "libMNN*.so") ../libs/ ; ls -lh ../libs/
        working-directory: 3rdparty/MNN

      - name: Upload CUDA install & MNN build files on failure
        if: steps.cuda.outcome == 'failure' || steps.mnn.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: nmm-cmake-cuda${{ matrix.cuda }}-install-log-${{ matrix.sysname }}
          path: |
            /var/log/cuda-installer.log
            3rdparty/MNN/build/Makefile
          if-no-files-found: ignore
          retention-days: 1
        
      - name: build mnnsr
        run: |
          ls ../../../../../3rdparty/MNN/libs/
          mkdir build ;cd build; cmake .. && make -j$(nproc)
          cp ../../../../../../3rdparty/MNN/libs/* ./  ; chmod 777 *;ls -lh
        working-directory: RealSR-NCNN-Android-CLI/MNN-SR/src/main/jni/

      - name: Copy libs
        continue-on-error: true
        run: |
          mkdir -p mnnsr/lib
          cp build/*.so mnnsr/lib/ ;cp build/mnnsr-ncnn mnnsr/
          ldd mnnsr/lib/libMNN.so | grep "=>" | awk '{print $3}' | xargs -I {} cp  -Ln {} mnnsr/lib/
          ldd mnnsr/mnnsr-ncnn | grep "=>" | awk '{print $3}' | xargs -I {} cp -Ln {} mnnsr/lib/
          # patchelf --set-rpath '$ORIGIN/../lib' mnnsr/mnnsr-ncnn
        working-directory: RealSR-NCNN-Android-CLI/MNN-SR/src/main/jni
        
      - name: test mnnsr
        run: |
          wget -nv https://huggingface.co/tumuyan2/realsr-models/resolve/main/models-MNNSR/RealESRGAN-SourceBook-latest.mnn
          cd mnnsr;wget https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/images/0.jpg;
          ./mnnsr-ncnn -b 0 -i 0.jpg -o 0-x2-${{ matrix.sysname }}-cuda${{ matrix.cuda }}.png -s 2 -m ../RealESRGAN-SourceBook-latest.mnn
          cd ../;cp -r mnnsr mnnsr-${{ matrix.sysname }}-cuda${{ matrix.cuda }}-opencl-vulkan-cpu
        working-directory: RealSR-NCNN-Android-CLI/MNN-SR/src/main/jni/

      # - name: Package artifacts
      #   if: always()
      #   run: |
      #     tar -czvf mnnsr.tar.gz mnnsr-${{ matrix.sysname }}-cuda${{ matrix.cuda }}-opencl-vulkan-cpu
      #   working-directory: RealSR-NCNN-Android-CLI/MNN-SR/src/main/jni

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mnnsr-${{ matrix.sysname }}-cuda${{ matrix.cuda }}
          path: RealSR-NCNN-Android-CLI/MNN-SR/src/main/jni/mnnsr-${{ matrix.sysname }}-cuda${{ matrix.cuda }}-opencl-vulkan-cpu
          retention-days: 90
          
  package:
    continue-on-error: true
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:        
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: mnnsr-artifacts
          pattern: mnnsr-*
          merge-multiple: true
        
      - name: List downloaded files
        run: |
          echo "Listing contents of the download directory:"
          ls -R mnnsr-artifacts

      - name: Copy test result
        run: |
          mkdir mnnsr-test-result
          cp mnnsr-artifacts/*.png mnnsr-test-result/
          tar -czvf mnnsr-test-result.tar.gz mnnsr-test-result
          
      - name: Upload test result
        uses: actions/upload-artifact@v4
        with:
          name: all-mnnsr-test-result
          path: mnnsr-test-result
          retention-days: 90
          
        
      - name: Download cuda & mnn artifacts
        uses: actions/download-artifact@v4
        with:
          path: mnn-cuda
          pattern:  |
            nmm-cmake-*
            cuda-*
          merge-multiple: false
      
      - name: Download cuda artifacts
        uses: actions/download-artifact@v4
        with:
          path: mnn-cuda
          pattern: cuda-*
          merge-multiple: false
          
      - name: Download mnn artifacts
        uses: actions/download-artifact@v4
        with:
          path: mnn-cuda
          pattern: nmm-cmake-*
          merge-multiple: false
        
      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: all-mnn-cuda
          path: mnn-cuda
          retention-days: 90 # 最终产物，可以保留更长时间
          
      - uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            cuda-*
            nmm-cmake-*
